# File: .github/workflows/deploy.yml
# Repository: manikandaraj.com (Main Repository)
# OIDC Version - No AWS credentials stored in GitHub

name: Deploy MANIKANDARAJ.COM to AWS (OIDC)

on:
  push:
    branches: [ main ]
  repository_dispatch:
    types: [theme-updated, content-updated]
  workflow_dispatch: # Allow manual trigger

env:
  HUGO_VERSION: 0.128.0
  AWS_REGION: us-east-1
  S3_BUCKET: manikandaraj.com
  AWS_ROLE_ARN: arn:aws:iam::196179791908:role/ManikandarajComGitHubActionsRole

permissions:
  id-token: write   # Required for OIDC
  contents: read    # Required for checkout

jobs:
  deploy-manikandaraj:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout MANIKANDARAJ.COM repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0
    
    - name: Update MANIKANDARJ.COM submodules to latest
      run: |
        git submodule update --remote --recursive
        git config --global user.email "action@github.com"
        git config --global user.name "MANIKANDARJ.COM GitHub Action"
        if [ -n "$(git status --porcelain)" ]; then
          git add .
          git commit -m "Update MANIKANDARJ.COM submodules to latest [skip ci]" || echo "No changes to commit"
          git push origin main || echo "No changes to push"
        fi
    
    - name: Setup Hugo for MANIKANDARJ.COM
      uses: peaceiris/actions-hugo@v3
      with:
        hugo-version: ${{ env.HUGO_VERSION }}
        extended: true
    
    - name: Build MANIKANDARJ.COM Hugo site
      run: hugo --minify
    
    - name: Configure AWS credentials via OIDC
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ env.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}
        role-session-name: ManikandarajComDeployment
    
    - name: Deploy MANIKANDARJ.COM to S3
      run: |
        aws s3 sync ./public/ s3://${{ env.S3_BUCKET }} --delete --cache-control "public, max-age=3600"
        echo "‚úÖ MANIKANDARJ.COM deployed to S3 bucket: ${{ env.S3_BUCKET }}"
    
    - name: Invalidate MANIKANDARJ.COM CloudFront cache
      run: |
        DISTRIBUTION_ID=$(aws cloudfront list-distributions --query "DistributionList.Items[?Origins.Items[0].DomainName=='${{ env.S3_BUCKET }}.s3.amazonaws.com'].Id" --output text)
        if [ -n "$DISTRIBUTION_ID" ] && [ "$DISTRIBUTION_ID" != "None" ]; then
          aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths "/*"
          echo "‚úÖ MANIKANDARJ.COM CloudFront cache invalidated for distribution: $DISTRIBUTION_ID"
        else
          echo "‚ÑπÔ∏è No CloudFront distribution found for MANIKANDARJ.COM (deployment successful without CDN cache invalidation)"
        fi
    
    - name: MANIKANDARJ.COM Deployment Summary
      run: |
        echo "üöÄ MANIKANDARJ.COM deployment completed successfully!"
        echo "üì¶ MANIKANDARJ.COM deployed to: https://${{ env.S3_BUCKET }}"
        echo "‚è∞ Deployed at: $(date)"
        echo "üìù Commit: ${{ github.sha }}"
        echo "üè∑Ô∏è Resource: RESOURCE_BIND=MANIKANDARJ.COM"
        echo "üîê Security: OIDC (No stored credentials)"
